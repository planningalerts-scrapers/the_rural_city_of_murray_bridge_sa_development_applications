// Parses the development applications at the South Australian The Rural City of Murray Bridge web
// site and places them in a database.
//
// Michael Bone
// 18th August 2018

"use strict";

import * as fs from "fs";

// Suppress the "pre-main prep time" messages generated by tesseract.js (there is no other easy
// way to suppress these messages because it appears that the code runs in a separate process and
// so, for example, overriding console.log in the current process appears to have no effect).

let text = fs.readFileSync("node_modules/tesseract.js-core/index.js").toString().replace(/Module.\$a\("pre-main prep time\: "\+\(Date\.now\(\)\-tj\)\+" ms"\)/g, "true");
fs.writeFileSync("node_modules/tesseract.js-core/index.js", text);

import * as cheerio from "cheerio";
import * as request from "request-promise-native";
import * as sqlite3 from "sqlite3";
import * as urlparser from "url";
import * as moment from "moment";
import * as pdfjs from "pdfjs-dist";
import * as tesseract from "tesseract.js";
import * as jimp from "jimp";
import * as didyoumean from "didyoumean2";

sqlite3.verbose();

const DevelopmentApplicationsUrl = "https://www.murraybridge.sa.gov.au/services/develop-plan-build/developmentandplanning/development-assessment-register?result_57806_result_page={0}";
const CommentUrl = "mailto:council@murraybridge.sa.gov.au";

declare const global: any;
declare const process: any;

// All valid street and suburb names.

let SuburbNames = null;
let StreetSuffixes = null;
let StreetNames = null;

// Sets up an sqlite database.

async function initializeDatabase() {
    return new Promise((resolve, reject) => {
        let database = new sqlite3.Database("data.sqlite");
        database.serialize(() => {
            database.run("create table if not exists [data] ([council_reference] text primary key, [address] text, [description] text, [info_url] text, [comment_url] text, [date_scraped] text, [date_received] text, [legal_description] text)");
            resolve(database);
        });
    });
}

// Inserts a row in the database if it does not already exist.

async function insertRow(database, developmentApplication) {
    return new Promise((resolve, reject) => {
        let sqlStatement = database.prepare("insert or replace into [data] values (?, ?, ?, ?, ?, ?, ?, ?)");
        sqlStatement.run([
            developmentApplication.applicationNumber,
            developmentApplication.address,
            developmentApplication.description,
            developmentApplication.informationUrl,
            developmentApplication.commentUrl,
            developmentApplication.scrapeDate,
            developmentApplication.receivedDate,
            developmentApplication.legalDescription
        ], function(error, row) {
            if (error) {
                console.error(error);
                reject(error);
            } else {
                console.log(`    Saved application \"${developmentApplication.applicationNumber}\" with address \"${developmentApplication.address}\", description \"${developmentApplication.description}\", legal description \"${developmentApplication.legalDescription}\" and received date \"${developmentApplication.receivedDate}\" to the database.`);
                sqlStatement.finalize();  // releases any locks
                resolve(row);
            }
        });
    });
}

// A bounding rectangle.

interface Rectangle {
    x: number,
    y: number,
    width: number,
    height: number
}

// An element (consisting of text and a bounding rectangle) in a PDF document.

interface Element extends Rectangle {
    text: string,
    confidence: number
}

// Gets the highest Y co-ordinate of all elements that are considered to be in the same row as
// the specified element.  Take care to avoid extremely tall elements (because these may otherwise
// be considered as part of all rows and effectively force the return value of this function to
// the same value, regardless of the value of startElement).

function getRowTop(elements: Element[], startElement: Element) {
    let top = startElement.y;
    for (let element of elements)
        if (element.y < startElement.y + startElement.height && element.y + element.height > startElement.y)  // check for overlap
            if (getVerticalOverlapPercentage(startElement, element) > 50)  // avoids extremely tall elements
                if (element.y < top)
                    top = element.y;
    return top;
}

// Constructs a rectangle based on the intersection of the two specified rectangles.

function intersect(rectangle1: Rectangle, rectangle2: Rectangle): Rectangle {
    let x1 = Math.max(rectangle1.x, rectangle2.x);
    let y1 = Math.max(rectangle1.y, rectangle2.y);
    let x2 = Math.min(rectangle1.x + rectangle1.width, rectangle2.x + rectangle2.width);
    let y2 = Math.min(rectangle1.y + rectangle1.height, rectangle2.y + rectangle2.height);
    if (x2 >= x1 && y2 >= y1)
        return { x: x1, y: y1, width: x2 - x1, height: y2 - y1 };
    else
        return { x: 0, y: 0, width: 0, height: 0 };
}

// Calculates the area of a rectangle.

function getArea(rectangle: Rectangle) {
    return rectangle.width * rectangle.height;
}

// Calculates the square of the Euclidean distance between two elements.

function calculateDistance(element1: Element, element2: Element) {
    let point1 = { x: element1.x + element1.width, y: element1.y + element1.height / 2 };
    let point2 = { x: element2.x, y: element2.y + element2.height / 2 };
    if (point2.x < point1.x - element1.width / 5)  // arbitrary overlap factor of 20% (ie. ignore elements that overlap too much in the horizontal direction)
        return Number.MAX_VALUE;
    return (point2.x - point1.x) * (point2.x - point1.x) + (point2.y - point1.y) * (point2.y - point1.y);
}

// Determines whether there is vertical overlap between two elements.

function isVerticalOverlap(element1: Element, element2: Element) {
    return element2.y < element1.y + element1.height && element2.y + element2.height > element1.y;
}

// Gets the percentage of vertical overlap between two elements (0 means no overlap and 100 means
// 100% overlap; and, for example, 20 means that 20% of the second element overlaps somewhere
// with the first element).

function getVerticalOverlapPercentage(element1: Element, element2: Element) {
    let y1 = Math.max(element1.y, element2.y);
    let y2 = Math.min(element1.y + element1.height, element2.y + element2.height);
    return (y2 < y1) ? 0 : (((y2 - y1) * 100) / element2.height);
}

// Gets the element immediately to the right of the specified element (but ignores elements that
// appear after a large horizontal gap).

function getRightElement(elements: Element[], element: Element) {
    let closestElement: Element = { text: undefined, confidence: 0, x: Number.MAX_VALUE, y: Number.MAX_VALUE, width: 0, height: 0 };
    for (let rightElement of elements)
        if (isVerticalOverlap(element, rightElement) &&  // ensure that there is at least some vertical overlap
            getVerticalOverlapPercentage(element, rightElement) > 50 &&  // avoid extremely tall elements (ensure at least 50% overlap)
            (rightElement.x > element.x + element.width - 3) &&  // ensure the element actually is to the right (approximately)
            (rightElement.x - (element.x + element.width) < 30) &&  // avoid elements that appear after a large gap (arbitrarily ensure less than a 30 pixel gap horizontally)
            calculateDistance(element, rightElement) < calculateDistance(element, closestElement))  // check if closer than any element encountered so far
            closestElement = rightElement;
    return (closestElement.text === undefined) ? undefined : closestElement;
}

// Gets the text to the right of the specified startElement up to the left hand side of the
// specified middleElement (adjusted left by 20% of the width of the middleElement as a safety
// precaution).  Only elements that overlap 50% or more in the vertical direction with the
// specified startElement are considered (ie. elements on the same "row" and not too tall).

function getRightRowText(elements: Element[], startElement: Element, middleElement: Element) {
    let rowElements = elements.filter(element =>
        element.x > startElement.x + startElement.width &&
        element.x < middleElement.x - 0.2 * middleElement.width &&
        getVerticalOverlapPercentage(element, startElement) > 50
    );

    // Sort and then join the elements into a single string.

    let xComparer = (a: Element, b: Element) => (a.x > b.x) ? 1 : ((a.x < b.x) ? -1 : 0);
    rowElements.sort(xComparer);
    return rowElements.map(element => element.text).join(" ").trim().replace(/\s\s+/g, " ");
}

// Reads all the address information into global objects.

function readAddressInformation() {
    StreetNames = {}
    for (let line of fs.readFileSync("streetnames.txt").toString().replace(/\r/g, "").trim().split("\n")) {
        let streetNameTokens = line.split(",");
        let streetName = streetNameTokens[0].trim();
        let suburbName = streetNameTokens[1].trim();
        if (StreetNames[streetName] === undefined)
            StreetNames[streetName] = [];
        StreetNames[streetName].push(suburbName);  // several suburbs may exist for the same street name
    }

    StreetSuffixes = {};
    for (let line of fs.readFileSync("streetsuffixes.txt").toString().replace(/\r/g, "").trim().split("\n")) {
        let streetSuffixTokens = line.split(",");
        StreetSuffixes[streetSuffixTokens[0].trim().toLowerCase()] = streetSuffixTokens[1].trim();
    }

    SuburbNames = {};
    for (let line of fs.readFileSync("suburbnames.txt").toString().replace(/\r/g, "").trim().split("\n")) {
        let suburbTokens = line.split(",");
        let suburbName = suburbTokens[0].trim().toLowerCase();
        let suburbStateAndPostCode = suburbTokens[1].trim();
        SuburbNames[suburbName] = suburbStateAndPostCode;
    }
}

// Gets the elements on the line above (typically an address line).  Note that the left hand side
// of the leftElement is used to limit how far left the search for elements is performed (and so
// avoids artefacts created at the very left hand side edge of the page being included as valid
// text, such as "|" in the November 2016 PDF on page 16).

function getAboveElements(elements: Element[], leftElement: Element, belowElement: Element, middleElement: Element) {
    // Find the elements above (at least a "line" above) the specified belowElement and to the
    // left of the middleElement.  These elements correspond to address elements (assumed to be on
    // one single line).

    let addressElements = elements.filter(element =>
        element.y < belowElement.y - belowElement.height &&
        element.x < middleElement.x - 0.2 * middleElement.width &&
        element.x > leftElement.x - leftElement.height);  // use height rather than width purposely (to avoid too much width)
        
    // Find the lowest address element (this is assumed to form part of the single line of the
    // address).  Note that middleElement.x is divided by two so that elements on the very right
    // hand side of the rectangle being searched will be ignored (these tend to be descriptions
    // that have been moved too far to the left, overlapping the rectangle in which the address
    // is expected to appear).

    let addressBottomElement = addressElements.reduce((previous, current) => ((current.x < middleElement.x / 2) && (previous === undefined || current.y > previous.y) ? current : previous), undefined);
    if (addressBottomElement === undefined)
        return [];

    // Obtain all elements on the same "line" as the lowest address element.

    addressElements = elements.filter(element =>
        element.y < belowElement.y - belowElement.height &&
        element.x < middleElement.x - 0.2 * middleElement.width &&
        element.x > leftElement.x - leftElement.height &&   // use height rather than width purposely (to avoid too much width)
        element.y >= addressBottomElement.y - Math.max(element.height, addressBottomElement.height));

    // Sort the address elements by Y co-ordinate and then by X co-ordinate (the Math.max
    // expressions exist to allow for the Y co-ordinates of elements to be not exactly aligned).

    let elementComparer = (a, b) => (a.y > b.y + Math.max(a.height, b.height)) ? 1 : ((a.y < b.y - Math.max(a.height, b.height)) ? -1 : ((a.x > b.x) ? 1 : ((a.x < b.x) ? -1 : 0)));
    addressElements.sort(elementComparer);

    // Remove any smaller elements (say less than half the area) that are 90% or more encompassed
    // by another element (this then avoids some artefacts of the text recognition, ie. elements
    // such as "r~" and "-" that can otherwise overlap the main text).

    addressElements = addressElements.filter(element =>
        !addressElements.some(otherElement =>
            getArea(otherElement) > 2 * getArea(element) &&  // smaller element (ie. the other element is at least double the area)
            getArea(element) > 0 &&
            getArea(intersect(element, otherElement)) / getArea(element) > 0.9
        )
    );

    // Remove any address elements that occur after a sizeable gap.  Any such elements are very
    // likely part of the description (not the address) because sometimes the description is
    // moved to the left, closer to the address (see "Crystal Report - DevAppSeptember 2015.pdf").

    for (let index = 1; index < addressElements.length; index++) {
        if (addressElements[index].x - (addressElements[index - 1].x + addressElements[index - 1].width) > 50) {  // gap greater than 50 pixels
            if (addressElements[index - 1].confidence >= 60 && addressElements[index].confidence >= 60) {  // avoid random marks and the edge of the paper being recognised as text
                addressElements.length = index;  // remove the element and all following elements that appear after a large gap
                break;
            }
        }
    }

    return addressElements;
}

// Gets the element containining the received date.

function getReceivedDateElement(elements: Element[], startElement: Element, middleElement: Element) {
    // Search to the right of "Dev App No." for the lodged date (including some leeway up and
    // down a few "lines" from the "Dev App No." text because sometimes the lodged date is offset
    // vertically by a fair amount; in some cases offset up and in other cases offset down).

    let dateElements = elements.filter(element => element.x >= middleElement.x &&
        element.y + element.height > startElement.y - 4 * startElement.height &&
        element.y < startElement.y + 4 * startElement.height &&
        moment(element.text.trim(), "D/MM/YYYY", true).isValid());

    // Select the left most date (ie. favour the "lodged" date over the "final descision" date).

    let receivedDateElement = dateElements.reduce((previous, current) => ((previous === undefined || previous.x > current.x) ? current : previous), undefined);
    return receivedDateElement;
}

// Gets the description.

function getDescription(elements: Element[], startElement: Element, middleElement: Element, receivedDateElement: Element) {
    // Set the element which delineates the top of the description text.

    let descriptionTopElementY = (receivedDateElement === undefined) ? startElement.y : (receivedDateElement.y + receivedDateElement.height);

    // Set the element which delineates the bottom left of the description text.
    
    let descriptionBottomLeftElement = middleElement;
    
    // Extract the description text.
    
    let descriptionElements = elements.filter(element => element.y > descriptionTopElementY &&
        element.y < descriptionBottomLeftElement.y &&
        element.x > descriptionBottomLeftElement.x - 0.2 * descriptionBottomLeftElement.width);
    
    // Sort the description elements by Y co-ordinate and then by X co-ordinate (the Math.max
    // expressions exist to allow for the Y co-ordinates of elements to be not exactly aligned;
    // for example, hyphens in text such as "Retail Fitout - Shop 7").
    
    let elementComparer = (a, b) => (a.y > b.y + (Math.max(a.height, b.height) * 2) / 3) ? 1 : ((a.y < b.y - (Math.max(a.height, b.height) * 2) / 3) ? -1 : ((a.x > b.x) ? 1 : ((a.x < b.x) ? -1 : 0)));
    descriptionElements.sort(elementComparer);

    // Construct the description from the description elements.

    return descriptionElements.map(element => element.text).join(" ").trim().replace(/\s\s+/g, " ").replace(/ﬁ/g, "fi").replace(/ﬂ/g, "fl");
}

// Formats (and corrects) an address.

function formatAddress(address: string) {
    address = address.trim();
    if (address === "")
        return { text: "", hasSuburb: false, hasStreet: false };

    // Correct one case where "T CE" was parsed instead of "TCE" (in the May 2016 PDF).  And
    // also correct several other special cases.  Only the first instance of the match is
    // replaced in each case (ie. the regular expressions do not have "g" suffixes).

    address = address
        .replace(/ T CE /, " TCE ")
        .replace(/ TC E /, " TCE ")
        .replace(/ RD BU /, " RD ")
        .replace(/ RD HD /, " RD ")
        .replace(/ RD MU /, " RD ")
        .replace(/ RD JAENSCH BEACH via /, " RD ")
        .replace(/ RD JAENSCH BEACH Via /, " RD ")
        .replace(/ RDJAENSCH BEACH via /, " RD ")
        .replace(/ HVW /, " HWY ")
        .replace(/^CedarAV /, "Cedar AV ")
        .replace(/^MyallAV /, "Myall AV ")
        .replace(/^RuraIAV /, "Rural AV ")
        .replace(/^RuralAV /, "Rural AV ")
        .replace(/^VWlowbark /, "Willowbark ")
        .replace(/ CRESMURRAY /, " CRES MURRAY ");

    let tokens = address.split(" ");

    // It is common for an invalid postcode of "0" to appear at the end of an address.  Remove
    // this if it is present.  For example, "Bremer Range RD CALLINGTON 0".  The post code can
    // safely be remove because it will be derived later based on the suburb name.

    let postCode = tokens[tokens.length - 1];
    if (/^[0-9]{4}$/.test(postCode) || postCode === "O" || postCode === "0" || postCode === "D" || postCode === "[]" || postCode === "[J")
        tokens.pop();

    // Remove the state abbreviation (this will be determined from the suburb; it is always "SA").

    let state = tokens[tokens.length - 1];
    if (didyoumean(state, [ "SA" ], { caseSensitive: true, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 1, trimSpace: true }) !== null)
        tokens.pop();
    
    // Pop tokens from the end of the array until a valid suburb name is encountered (allowing
    // for a few spelling errors).

    let suburbName = null;
    for (let index = 1; index <= 4; index++) {
        let suburbNameMatch = didyoumean(tokens.slice(-index).join(" "), Object.keys(SuburbNames), { caseSensitive: false, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 2, trimSpace: true });
        if (suburbNameMatch !== null) {
            suburbName = SuburbNames[suburbNameMatch];
            tokens.splice(-index, index);  // remove elements from the end of the array           
            break;
        }
    }

    if (suburbName === null)  // suburb name not found (or not recognised)
        return { text: address, hasSuburb: false, hasStreet: false };

    // Expand an abbreviated street suffix.  For example, expand "RD" to "Road".

    let streetSuffixAbbreviation = tokens.pop() || "";
    let streetSuffix = StreetSuffixes[streetSuffixAbbreviation.toLowerCase()] || streetSuffixAbbreviation;

    // Allow minor spelling corrections in the remaining tokens to construct a street name.

    let streetName = (tokens.join(" ") + " " + streetSuffix).trim();
    let streetNameMatch = didyoumean(streetName, Object.keys(StreetNames), { caseSensitive: false, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 2, trimSpace: true });
    if (streetNameMatch !== null)
        streetName = streetNameMatch;

    return { text: (streetName + ((streetName === "") ? "" : ", ") + suburbName).trim(), hasSuburb: true, hasStreet: (streetName.length > 0) };
}

// Gets and formats the address.

function joinAddressElements(elements: Element[]) {
    return elements.map(element => element.text).join(" ").trim().replace(/\s\s+/g, " ").replace(/ﬁ/g, "fi").replace(/ﬂ/g, "fl").replace(/\\\//g, "V").replace(/‘/g, "").replace(/’/g, "").replace(/“/g, "").replace(/”/g, "").replace(/—/g, "").replace(/_/g, "").replace(/\./g, "").replace(/\-/g, "").replace(/\//g, "").replace(/!/g, "");
}

function isAddress(address: string) {
    return address !== "" && !address.startsWith("Dev Cost") && !address.startsWith("Total Area") && !(address.includes(" Cost") && address.includes("$") && address.includes(","));  // ignores text such as "my Cost: $150,000" (really: "Dev Cost: $160,000") found in "Crystal Report - DevApp November 2015.pdf"
}

function isLegalDescription(address: string) {
    return address !== "" && (address.startsWith("HD") || address.startsWith("LOT") || address.startsWith("PCE") || address.startsWith("PLT")  || address.startsWith("SIT"));
}

function getAddress(elements: Element[], assessmentNumberElement: Element, middleElement: Element) {
    // Allow for up to three lines in the address.

    let addressLine3Elements = getAboveElements(elements, assessmentNumberElement, assessmentNumberElement, middleElement);
    let addressLine3 = joinAddressElements(addressLine3Elements)
    if (!isAddress(addressLine3))
        return { address: undefined, legalDescription: undefined };

    let addressLine2Elements = getAboveElements(elements, assessmentNumberElement, addressLine3Elements[0], middleElement);
    let addressLine2 = joinAddressElements(addressLine2Elements)
    addressLine2 = isAddress(addressLine2) ? addressLine2 : "";

    let addressLine1Elements = isAddress(addressLine2) ? getAboveElements(elements, assessmentNumberElement, addressLine2Elements[0], middleElement) : [];
    let addressLine1 = joinAddressElements(addressLine1Elements)
    addressLine1 = isAddress(addressLine1) ? addressLine1 : "";
    
    // Construct the address from the discovered address elements (and attempt to correct some
    // spelling errors).  Note that if the address starts with a suburb then there may be a
    // street name on the line above.

    let formattedAddress = formatAddress(addressLine3);
    if (!formattedAddress.hasStreet && isAddress(addressLine2) && !isLegalDescription(addressLine2))
        formattedAddress = formatAddress(addressLine2 + " " + formattedAddress.text);

    // Attempt to extract any legal description (eg. a hundred name and lot number).

    let legalDescription = "";
    if (isLegalDescription(addressLine1))
        legalDescription += ((legalDescription === "") ? "" : " ") + addressLine1;
    if (isLegalDescription(addressLine2))
        legalDescription += ((legalDescription === "") ? "" : " ") + addressLine2;
    if (isLegalDescription(addressLine3))
        legalDescription += ((legalDescription === "") ? "" : " ") + addressLine3;

    return { address: formattedAddress.text, legalDescription: legalDescription };
}

// Parses the details from the elements associated with a single development application.

function parseApplicationElements(elements: Element[], startElement: Element, informationUrl: string) {
    // Find the "Assessment Number" or "Asses Num" text.

    // let assessmentNumberElement = getAssessmentNumberElement(elements, startElement);

    let assessmentNumberElement = findElement(elements, "Asses Num", false);
    if (assessmentNumberElement === undefined)
        assessmentNumberElement = findElement(elements, "Assess Num", false);
    if (assessmentNumberElement === undefined)
        assessmentNumberElement = findElement(elements, "Assessment Number", false);
    if (assessmentNumberElement === undefined) {
        let elementSummary = elements.map(element => `[${element.text}]`).join("");
        console.log(`Could not find the \"Assessment Number\", \"Assess Num\" or \"Asses Num\" text on the PDF page for the current development application.  The development application will be ignored.  Elements: ${elementSummary}`);
        return undefined;
    }

    // Find the "Applicant" text (a useful reference point).

    let applicantElement = elements.find(element =>
        element.y > startElement.y &&
        didyoumean(element.text, [ "Applicant" ], { caseSensitive: true, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 3, trimSpace: true }) !== null);

    // Find the "Builder" text (a useful reference point).

    let builderElement = elements.find(element =>
        element.y > startElement.y &&
        didyoumean(element.text, [ "Builder" ], { caseSensitive: true, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 3, trimSpace: true }) !== null);

    // One of either the applicant or builder elements is required in order to determine where
    // the description text starts on the X axis (and where the development application number
    // and address end on the X axis).

    let middleElement = (applicantElement === undefined) ? builderElement : applicantElement;
    if (middleElement === undefined) {
        let elementSummary = elements.map(element => `[${element.text}]`).join("");
        console.log(`Could not find the \"Applicant\" or \"Builder\" text on the PDF page for the current development application.  The development application will be ignored.  Elements: ${elementSummary}`);
        return undefined;
    }

    // Get the application number (allowing for a lot of common parsing errors).

    let applicationNumber = getRightRowText(elements, startElement, middleElement).trim().replace(/\s/g, "");
    applicationNumber = applicationNumber.replace(/[IlL\[\]\|’,!\(\)\{\}]/g, "/").replace(/°/g, "0").replace(/'\//g, "1").replace(/\/\//g, "1/").replace(/201\?/g, "2017").replace(/‘/g, "").replace(/'/g, "");  // for example, converts "17I2017" to "17/2017"
    if (applicationNumber.length >= 6 && /120[0-9][0-9]$/.test(applicationNumber))
        applicationNumber = applicationNumber.substring(0, applicationNumber.length - 5) + "/" + applicationNumber.substring(applicationNumber.length - 4);  // for example, converts "35612015" to "356/2015"

    if (applicationNumber === "") {
        let elementSummary = elements.map(element => `[${element.text}]`).join("");
        console.log(`Could not find the application number on the PDF page for the current development application.  The development application will be ignored.  Elements: ${elementSummary}`);
        return undefined;
    }

    console.log(`    Found \"${applicationNumber}\".`);

    // Get the received date.

    let receivedDate: moment.Moment = undefined;
    let receivedDateElement = getReceivedDateElement(elements, startElement, middleElement);
    if (receivedDateElement !== undefined)
        receivedDate = moment(receivedDateElement.text.trim(), "D/MM/YYYY", true);

    // Get the description.

    let description = getDescription(elements, startElement, middleElement, receivedDateElement);

    // Get the address.

    let { address, legalDescription } = getAddress(elements, assessmentNumberElement, middleElement);
    if (address === undefined) {
        let elementSummary = elements.map(element => `[${element.text}]`).join("");
        console.log(`Application number ${applicationNumber} will be ignored because an address was not found or parsed (searching upwards from the "Assessment Number" or "Asses Num" text).  Elements: ${elementSummary}`);
        return undefined;
    }

    return {
        applicationNumber: applicationNumber,
        address: address,
        description: ((description === "") ? "No description provided" : description),
        informationUrl: informationUrl,
        commentUrl: CommentUrl,
        scrapeDate: moment().format("YYYY-MM-DD"),
        receivedDate: (receivedDate !== undefined && receivedDate.isValid()) ? receivedDate.format("YYYY-MM-DD") : "",
        legalDescription: legalDescription
    };
}

// Segments an image vertically and horizontally based on blocks of white (or almost white) pixels
// in order to avoid using too much memory.  Very often a large image will be mostly white space.
// A very simple horizontal and then vertical search is performed for consecutive lines of white
// (or mostly white) pixels.

function segmentImage(jimpImage: any) {
    let bounds = { x: 0, y: 0, width: jimpImage.bitmap.width, height: jimpImage.bitmap.height };

    // Only segment large images (do not waste time on small images which are already small enough
    // that they will not cause too much memory to be used).

    if (jimpImage.bitmap.width * jimpImage.bitmap.height < 400 * 400)
        return [{ image: jimpImage, bounds: bounds }];
       
    // Segment the image based on white space.

    let rectangles: Rectangle[] = [];
    let horizontalRectangles: Rectangle[] = [];
    let verticalRectangles = segmentImageVertically(jimpImage, bounds);
    for (let verticalRectangle of verticalRectangles)
        horizontalRectangles = horizontalRectangles.concat(segmentImageHorizontally(jimpImage, verticalRectangle));
    for (let horizontalRectangle of horizontalRectangles)
        rectangles = rectangles.concat(segmentImageVertically(jimpImage, horizontalRectangle));  // repeat the segmentation vertically on the sub-images (because this may then produce even smaller images)

    // Extract images delineated by the white space.

    let segments: { image: jimp, bounds: Rectangle }[] = [];
    for (let rectangle of rectangles) {
        let croppedJimpImage: jimp = new (jimp as any)(rectangle.width, rectangle.height);
        croppedJimpImage.blit(jimpImage, 0, 0, rectangle.x, rectangle.y, rectangle.width, rectangle.height);            
        segments.push({ image: croppedJimpImage, bounds: rectangle });
    }
    return segments;
}

// Segments an image vertically (within the specified bounds) by searching for blocks of
// consecutive, white (or close to white) horizontal lines.

function segmentImageVertically(jimpImage: any, bounds: Rectangle) {
    let whiteBlocks = [];

    let isPreviousWhiteLine = false;
    for (let y = bounds.y; y < bounds.y + bounds.height; y++) {
        // Count the number of white pixels across the current horizontal line.

        let whiteCount = 0;
        for (let x = bounds.x; x < bounds.x + bounds.width; x++) {
            let value = jimpImage.getPixelColor(x, y);
            if (value === 0xffffffff)  // performance improvement (for the common case of a pure white pixel)
                whiteCount++;
            else {
                let color = (jimp as any).intToRGBA(value);
                if (color.r > 240 && color.g > 240 && color.b > 240)  // white or just off-white
                    whiteCount++;
            }
        }

        // If the line is mostly white pixels then it is considered a white line.

        let isWhiteLine = (whiteCount >= bounds.width - 2);  // allow up to two non-white pixels

        if (isWhiteLine) {
            if (isPreviousWhiteLine)
                whiteBlocks[whiteBlocks.length - 1].height++;  // increase the size of the current block of white
            else
                whiteBlocks.push({ y: y, height: 1 });  // start a new block
        }

        isPreviousWhiteLine = isWhiteLine;
    }

    // Only keep blocks of white that consist of 25 consecutive lines or more (an arbitrary value).

    whiteBlocks = whiteBlocks.filter(whiteBlock => whiteBlock.height >= 25);

    // Determine the rectangles that remain when the blocks of white are removed.

    let rectangles = [];
    for (let index = 0; index <= whiteBlocks.length; index++) {
        let y = (index === 0) ? bounds.y : (whiteBlocks[index - 1].y + whiteBlocks[index - 1].height);
        let height = ((index === whiteBlocks.length) ? (bounds.y + bounds.height) : whiteBlocks[index].y) - y;
        if (height > 0)
            rectangles.push({ x: bounds.x, y: y, width: bounds.width, height: height });
    }

    return rectangles;
}

// Segments an image horizontally (within the specified bounds) by searching for blocks of
// consecutive, white (or close to white) vertical lines.

function segmentImageHorizontally(jimpImage: any, bounds: Rectangle) {
    let whiteBlocks = [];

    let isPreviousWhiteLine = false;
    for (let x = bounds.x; x < bounds.x + bounds.width; x++) {
        // Count the number of white pixels across the current vertical line.

        let whiteCount = 0;
        for (let y = bounds.y; y < bounds.y + bounds.height; y++) {
            let value = jimpImage.getPixelColor(x, y);
            if (value === 0xffffffff)  // performance improvement (for the common case of a pure white pixel)
                whiteCount++;
            else {
                let color = (jimp as any).intToRGBA(value);
                if (color.r > 240 && color.g > 240 && color.b > 240)  // white or just off-white
                    whiteCount++;
            }
        }

        // If the line is mostly white pixels then it is considered a white line.

        let isWhiteLine = (whiteCount >= bounds.height - 2);  // allow up to two non-white pixels

        if (isWhiteLine) {
            if (isPreviousWhiteLine)
                whiteBlocks[whiteBlocks.length - 1].width++;  // increase the size of the current block of white
            else
                whiteBlocks.push({ x: x, width: 1 });  // start a new block
        }

        isPreviousWhiteLine = isWhiteLine;
    }

    // Only keep blocks of white that consist of 25 consecutive lines or more (an arbitrary value).

    whiteBlocks = whiteBlocks.filter(whiteBlock => whiteBlock.width >= 25);

    // Determine the bounds of the rectangles that remain when the blocks of white are removed.

    let rectangles = [];
    for (let index = 0; index <= whiteBlocks.length; index++) {
        let x = (index === 0) ? bounds.x : (whiteBlocks[index - 1].x + whiteBlocks[index - 1].width);
        let width = ((index === whiteBlocks.length) ? (bounds.x + bounds.width) : whiteBlocks[index].x) - x;
        if (width > 0)
            rectangles.push({ x: x, y: bounds.y, width: width, height: bounds.height });
    }

    return rectangles;
}

// Gets the record count number from the first page.

function getRecordCount(elements: Element[], startElement: Element) {
    let topmostY = (startElement === undefined) ? Number.MAX_VALUE : startElement.y;
    
    // Find the "Records" text (allowing for spelling errors).

    let recordsElement = elements.find(element =>
         element.y < topmostY &&
         didyoumean(element.text, [ "Records" ], { caseSensitive: false, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 2, trimSpace: true }) !== null
    );

    // Get the number to the right of "Records".

    if (recordsElement !== undefined) {
        let recordNumberElement = elements.find(element =>
            element.x > recordsElement.x + recordsElement.width &&
            getVerticalOverlapPercentage(element, recordsElement) > 50
        );
    
        if (recordNumberElement !== undefined) {
            let recordCount = Number(recordNumberElement.text);  // returns NaN if invalid
            if (!isNaN(recordCount))
                return recordCount;
        }
    }

    return -1;
}

// Finds the start element of each development application on the current PDF page (there are
// typically three development applications on a single page and each development application
// typically begins with the text "Dev App No.").

function findStartElements(elements: Element[]) {
    // Examine all the elements on the page that being with "D" or "d".
    
    let startElements: Element[] = [];
    for (let element of elements.filter(element => element.text.trim().toLowerCase().startsWith("d"))) {
        // Extract up to 10 elements to the right of the element that has text starting with the
        // letter "d" (and so may be the start of the "Dev App No" or "Dev App No." text).  Join
        // together the elements to the right in an attempt to find the best match to the text
        // "Dev App No" or "Dev App No.".

        let rightElement = element;
        let rightElements: Element[] = [];
        let matches = [];

        do {
            rightElements.push(rightElement);
        
            // Allow for common misspellings of the "no." text.

            let text = rightElements.map(element => element.text).join("").replace(/[\s,\-_]/g, "").replace(/n0/g, "no").replace(/n°/g, "no").replace(/"o/g, "no").replace(/"0/g, "no").replace(/"°/g, "no").replace(/“°/g, "no").toLowerCase();
            if (text.length >= 11)  // stop once the text is too long
                break;
            if (text.length >= 7) {  // ignore until the text is close to long enough
                if (text === "devappno" || text === "devappno.")
                    matches.push({ element: rightElement, threshold: 0, text: text });
                else if (didyoumean(text, [ "DevAppNo", "DevAppNo." ], { caseSensitive: false, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 1, trimSpace: true }) !== null)
                    matches.push({ element: rightElement, threshold: 1, text: text });
                else if (didyoumean(text, [ "DevAppNo", "DevAppNo." ], { caseSensitive: false, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 2, trimSpace: true }) !== null)
                    matches.push({ element: rightElement, threshold: 2, text: text });
            }

            rightElement = getRightElement(elements, rightElement);
        } while (rightElement !== undefined && rightElements.length < 10);

        // Chose the best match (if any matches were found).

        if (matches.length > 0) {
            let bestMatch = matches.reduce((previous, current) =>
                (previous === undefined ||
                current.threshold < previous.threshold ||
                (current.threshold === previous.threshold && Math.abs(current.text.trim().length - "DevAppNo.".length) <= Math.abs(previous.text.trim().length - "DevAppNo.".length)) ? current : previous), undefined);
            startElements.push(bestMatch.element);
        }
    }

    // Ensure the start elements are sorted in the order that they appear on the page.

    let yComparer = (a, b) => (a.y > b.y) ? 1 : ((a.y < b.y) ? -1 : 0);
    startElements.sort(yComparer);
    return startElements;
}

// Finds the element that most closely matches the specified text.

function findElement(elements: Element[], text: string, shouldSelectRightmostElement: boolean) {
    // Examine all the elements on the page that being with the same character as the requested
    // text.
    
    let condensedText = text.replace(/[\s,\-_]/g, "").toLowerCase();
    let firstCharacter = condensedText.charAt(0);

    let matches = [];
    for (let element of elements.filter(element => element.text.trim().toLowerCase().startsWith(firstCharacter))) {
        // Extract up to 5 elements to the right of the element that has text starting with the
        // required character (and so may be the start of the requested text).  Join together the
        // elements to the right in an attempt to find the best match to the text.

        let rightElement = element;
        let rightElements: Element[] = [];

        do {
            rightElements.push(rightElement);

            let currentText = rightElements.map(element => element.text).join("").replace(/[\s,\-_]/g, "").toLowerCase();

            if (currentText.length > condensedText.length + 2)  // stop once the text is too long
                break;
            if (currentText.length >= condensedText.length - 2) {  // ignore until the text is close to long enough
                if (currentText === condensedText)
                    matches.push({ leftElement: rightElements[0], rightElement: rightElement, threshold: 0, text: currentText });
                else if (didyoumean(currentText, [ condensedText ], { caseSensitive: false, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 1, trimSpace: true }) !== null)
                    matches.push({ leftElement: rightElements[0], rightElement: rightElement, threshold: 1, text: currentText });
                else if (didyoumean(currentText, [ condensedText ], { caseSensitive: false, returnType: "first-closest-match", thresholdType: "edit-distance", threshold: 2, trimSpace: true }) !== null)
                    matches.push({ leftElement: rightElements[0], rightElement: rightElement, threshold: 2, text: currentText });
            }

            rightElement = getRightElement(elements, rightElement);
        } while (rightElement !== undefined && rightElements.length < 5);  // up to 5 elements
    }

    // Chose the best match (if any matches were found).  Note that trimming is performed here so
    // that text such as "  Plan" is matched in preference to text such as "plan)" (when looking
    // for elements that match "Plan").  For an example of this problem see "200/303/07" in
    // "https://www.walkerville.sa.gov.au/webdata/resources/files/DA%20Register%20-%202007.pdf".
    //
    // Note that if the match is made of several elements then sometimes the caller requires the
    // left most element and sometimes the right most element (depending on where further text
    // will be searched for relative to this "found" element).

    if (matches.length > 0) {
        let bestMatch = matches.reduce((previous, current) =>
            (previous === undefined ||
            current.threshold < previous.threshold ||
            (current.threshold === previous.threshold && Math.abs(current.text.trim().length - condensedText.length) < Math.abs(previous.text.trim().length - condensedText.length)) ? current : previous), undefined);
        return shouldSelectRightmostElement ? bestMatch.rightElement : bestMatch.leftElement;
    }

    return undefined;
}

// Converts image data from the PDF to a jimp format image.

function convertToJimpImage(image: any) {
    let pixelSize = (8 * image.data.length) / (image.width * image.height);
    let jimpImage = null;

    if (pixelSize === 1) {
        // A monochrome image (one bit per pixel).

        jimpImage = new (jimp as any)(image.width, image.height);
        for (let x = 0; x < image.width; x++) {
            for (let y = 0; y < image.height; y++) {
                let index = y * (image.width / 8);
                let bitIndex = x % 8;
                let byteIndex = (x - bitIndex) / 8;
                index += byteIndex;
                let color = null;
                if ((image.data[index] & (128 >> bitIndex)) === 0)
                    color = jimp.rgbaToInt(0, 0, 0, 255);  // black pixel
                else
                    color = jimp.rgbaToInt(255, 255, 255, 255);  // white pixel
                jimpImage.setPixelColor(color, x, y);
            }
        }
    } else {
        // Assume a 24 bit colour image (3 bytes per pixel).

        jimpImage = new (jimp as any)(image.width, image.height);
        for (let x = 0; x < image.width; x++) {
            for (let y = 0; y < image.height; y++) {
                let index = (y * image.width * 3) + (x * 3);
                let color = jimp.rgbaToInt(image.data[index], image.data[index + 1], image.data[index + 2], 255);
                jimpImage.setPixelColor(color, x, y);
            }
        }
    }

    return jimpImage;
}

// Parses an image (from a PDF document).

async function parseImage(image: any, bounds: Rectangle) {
    // Convert the image data into a format that can be used by jimp and then segment the image
    // based on blocks of white.

    let segments = segmentImage(convertToJimpImage(image));
    if (global.gc)
        global.gc();

    let elements: Element[] = [];
    for (let segment of segments) {
        // Attempt to avoid using too much memory by scaling down large images.

        let scaleFactor = 1.0;
        if (segment.bounds.width * segment.bounds.height > 1000 * 1000) {
            scaleFactor = 0.5;
            console.log(`    Scaling a large image (${segment.bounds.width}×${segment.bounds.height}) by ${scaleFactor} to reduce memory usage.`);
            segment.image = segment.image.scale(scaleFactor, jimp.RESIZE_BEZIER);
        }

        let imageBuffer = await new Promise((resolve, reject) => segment.image.getBuffer(jimp.MIME_PNG, (error, buffer) => error ? reject(error) : resolve(buffer)));
        segment.image = undefined;  // attempt to release memory

        // Report larger memory usage and larger images for troubleshooting purposes.

        let memoryUsage = process.memoryUsage();
        if (memoryUsage.rss > 200 * 1024 * 1024)  // 200 MB
            console.log(`    Memory Usage: rss: ${Math.round(memoryUsage.rss / (1024 * 1024))} MB, heapTotal: ${Math.round(memoryUsage.heapTotal / (1024 * 1024))} MB, heapUsed: ${Math.round(memoryUsage.heapUsed / (1024 * 1024))} MB, external: ${Math.round(memoryUsage.external / (1024 * 1024))} MB`);
        if (segment.bounds.width * segment.bounds.height > 700 * 700)
            console.log(`    Parsing a large image with bounds { x: ${Math.round(segment.bounds.x)}, y: ${Math.round(segment.bounds.y)}, width: ${Math.round(segment.bounds.width)}, height: ${Math.round(segment.bounds.height)} }.`);

        // Note that textord_old_baselines is set to 0 so that text that is offset by half the
        // height of the the font is correctly recognised.

        let result: any = await new Promise((resolve, reject) => { tesseract.recognize(imageBuffer, { textord_old_baselines: "0" }).then(function(result) { resolve(result); }) });
        tesseract.terminate();
        if (global.gc)
            global.gc();

        // Simplify the lines (remove most of the information generated by tesseract.js).

        if (result && result.blocks && result.blocks.length)
            for (let block of result.blocks)
                for (let paragraph of block.paragraphs)
                    for (let line of paragraph.lines)
                        elements = elements.concat(line.words.map(word => {
                            return {
                                text: word.text,
                                confidence: word.confidence,
                                choiceCount: word.choices.length,
                                x: bounds.x + segment.bounds.x + word.bbox.x0 / scaleFactor,
                                y: bounds.y + segment.bounds.y + word.bbox.y0 / scaleFactor,
                                width: (word.bbox.x1 - word.bbox.x0) / scaleFactor,
                                height: (word.bbox.y1 - word.bbox.y0) / scaleFactor
                            };
                        }));
    }

    return elements;
}

// Parses a PDF document.

async function parsePdf(url: string) {
    let developmentApplications = [];
    let recordCount = -1;

    // Read the PDF.

    let buffer = await request({ url: url, encoding: null, proxy: process.env.MORPH_PROXY });
    await sleep(2000 + getRandom(0, 5) * 1000);

    // Parse the PDF.  Each page has the details of multiple applications.  Note that the PDF is
    // re-parsed on each iteration of the loop (ie. once for each page).  This then avoids large
    // memory usage by the PDF (just calling page._destroy() on each iteration of the loop appears
    // not to be enough to release all memory used by the PDF parsing).

    for (let pageIndex = 0; pageIndex < 500; pageIndex++) {  // limit to an arbitrarily large number of pages (to avoid any chance of an infinite loop)
        let pdf = await pdfjs.getDocument({ data: buffer, disableFontFace: true, ignoreErrors: true });
        if (pageIndex >= pdf.numPages)
            break;

        console.log(`Reading and parsing applications from page ${pageIndex + 1} of ${pdf.numPages}.`);
        let page = await pdf.getPage(pageIndex + 1);

        // Find all the text elements (because there may be text in addition to images).

        let textContent = await page.getTextContent();
        let viewport = await page.getViewport(1.0);

        let textElements: Element[] = textContent.items.map(item => {
            let transform = pdfjs.Util.transform(viewport.transform, item.transform);

            // Work around the issue https://github.com/mozilla/pdf.js/issues/8276 (heights are
            // exaggerated).  The problem seems to be that the height value is too large in some
            // PDFs.  Provide an alternative, more accurate height value by using a calculation
            // based on the transform matrix.

            let workaroundHeight = Math.sqrt(transform[2] * transform[2] + transform[3] * transform[3]);

            let x = transform[4];
            let y = transform[5];
            let width = item.width;
            let height = workaroundHeight;

            return { text: item.str, x: x, y: y, width: width, height: height };
        });
        console.log(`    Found ${textElements.length} text element(s).`)

        // Find all image elements.

        let imageElements: Element[] = [];
        let operators = await page.getOperatorList();

        if (page.rotate !== 0) {
            // Ignore rotated pages when parsing images.

            console.log(`Ignoring images in page ${pageIndex + 1} because it is rotated ${page.rotate}°.`);
        } else {
            // Find and parse any images in the current PDF page.

            let isFirstImage = true;

            for (let index = 0; index < operators.fnArray.length; index++) {
                if (operators.fnArray[index] !== pdfjs.OPS.paintImageXObject && operators.fnArray[index] !== pdfjs.OPS.paintImageMaskXObject)
                    continue;

                // The operator either contains the name of an image or an actual image.

                let image = operators.argsArray[index][0];
                if (typeof image === "string")
                    image = page.objs.get(image);  // get the actual image using its name
                else
                    operators.argsArray[index][0] = undefined;  // attempt to release memory used by the image

                // Obtain the transform that applies to the image.  Note that the first image in the
                // PDF typically has a pdfjs.OPS.dependency element in the fnArray between it and its
                // transform (pdfjs.OPS.transform).

                let transform = undefined;
                if (index - 1 >= 0 && operators.fnArray[index - 1] === pdfjs.OPS.transform)
                    transform = operators.argsArray[index - 1];
                else if (index - 2 >= 0 && operators.fnArray[index - 1] === pdfjs.OPS.dependency && operators.fnArray[index - 2] === pdfjs.OPS.transform)
                    transform = operators.argsArray[index - 2];
                else
                    continue;

                // Use the transform to translate the X and Y co-ordinates, but assume that the width
                // and height are consistent between all images and do not need to be scaled.  This is
                // almost always the case; only the first image is sometimes an exception (with a
                // scale factor of 2.083333 instead of 4.166666).

                let bounds: Rectangle = {
                    x: (transform[4] * image.height) / transform[3],
                    y: ((viewport.height - transform[5] - transform[3]) * image.height) / transform[3],
                    width: image.width,
                    height: image.height
                };

                // Ignore the first image on the page as this is typically a white mask over the
                // entire page.  And because it is typically at a different scale (2.083333 instead
                // of 4.166666) then any text which is accidentally parsed will be set to the wrong
                // X and Y co-ordinates.  It is easier just to ignore this first image.  In one case
                // the text "HI:" was parsed and interfered with the "Dev App No." text resulting in
                // an application being missed (see page 21 of the May 2018 PDF).
                //
                // Note that some PDFs have just one image with a scale of 2.777777 (and this should
                // be parsed).

                let scaleY = image.height / transform[3];
                if (scaleY < 2.5 && isFirstImage && image.height >= 1000 && image.width >= 1000)
                    continue;
                isFirstImage = false;
            
                // Parse the text from the image.

                imageElements = imageElements.concat(await parseImage(image, bounds));
                if (global.gc)
                    global.gc();
            }
        }
        console.log(`    Found ${imageElements.length} image element(s).`)

        // Merge the elements extracted from the text on the current page with the elements
        // extracted from the images on the current page.

        let elements: Element[] = [];
        elements = elements.concat(textElements);
        elements = elements.concat(imageElements);
        console.log(`    Found a total of ${elements.length} text and image element(s) on the current page.`)

        // Release the memory used by the PDF now that it is no longer required (it will be
        // re-parsed on the next iteration of the loop for the next page).

        await pdf.destroy();
        if (global.gc)
            global.gc();

        // Ignore extremely low height elements (because these can be parsed as text but are
        // very unlikely to actually be text; for example see the October 2016 PDF on page 19).
        // In some rare cases they may be valid (such as a full stop far from other text).

        elements = elements.filter(element => element.height > 2);

        // Sort the elements by Y co-ordinate and then by X co-ordinate.

        let elementComparer = (a, b) => (a.y > b.y) ? 1 : ((a.y < b.y) ? -1 : ((a.x > b.x) ? 1 : ((a.x < b.x) ? -1 : 0)));
        elements.sort(elementComparer);

        // Group the elements into sections based on where the "Dev App No." text starts (and
        // any other element the "Dev App No." elements line up with horizontally with a margin
        // of error equal to about the height of the "Dev App No." text; this is done in order
        // to capture the lodged date, which may be higher up than the "Dev App No." text).

        let applicationElementGroups = [];
        let startElements = findStartElements(elements);
        if (startElements.length === 0) {
            let elementSummary = elements.map(element => `[${element.text}]`).join("");
            console.log(`    Could not find any start elements in: ${elementSummary}`);
        }

        for (let index = 0; index < startElements.length; index++) {
            // Determine the highest Y co-ordinate of this row and the next row (or the bottom of
            // the current page).  Allow some leeway vertically (add some extra height) because
            // in some cases the lodged date is a fair bit higher up than the "Dev App No." text
            // (see the similar leeway used in getReceivedDate).
            
            let startElement = startElements[index];
            let raisedStartElement: Element = {
                text: startElement.text,
                confidence: startElement.confidence,
                x: startElement.x,
                y: startElement.y - 3 * startElement.height,  // leeway
                width: startElement.width,
                height: startElement.height };
            let rowTop = getRowTop(elements, raisedStartElement);
            let nextRowTop = (index + 1 < startElements.length) ? getRowTop(elements, startElements[index + 1]) : Number.MAX_VALUE;

            // Extract all elements between the two rows.

            applicationElementGroups.push({ startElement: startElements[index], elements: elements.filter(element => element.y >= rowTop && element.y + element.height < nextRowTop) });
        }

        // The first page typically has a record count which can be used to determine if all
        // applications are successfully parsed later (although sometimes this record count
        // itself is innaccurate).

        if (pageIndex === 0 && startElements.length >= 1)  // first page
            recordCount = getRecordCount(elements, startElements[0]);

        // Parse the development application from each group of elements (ie. a section of the
        // current page of the PDF document).  If the same application number is encountered a
        // second time in the same document then this likely indicates the parsing of the images
        // has incorrectly recognised some of the digits in the application number.  In this case
        // add a suffix to the application number so it is unique (and so will be inserted into
        // the database later instead of being ignored).

        for (let applicationElementGroup of applicationElementGroups) {
            let developmentApplication = parseApplicationElements(applicationElementGroup.elements, applicationElementGroup.startElement, url);
            if (developmentApplication !== undefined) {
                let suffix = 0;
                let applicationNumber = developmentApplication.applicationNumber;
                while (developmentApplications.some(otherDevelopmentApplication => otherDevelopmentApplication.applicationNumber === developmentApplication.applicationNumber))
                    developmentApplication.applicationNumber = `${applicationNumber} (${++suffix})`;  // add a unique suffix
                developmentApplications.push(developmentApplication);
            }
        }
    }

    // Check whether the expected number of development applications have been encountered.

    if (recordCount !== -1) {
        let recordCountDiscrepancy = recordCount - developmentApplications.length;
        if (recordCountDiscrepancy <= -2)
            console.log(`Warning: ${-recordCountDiscrepancy} extra records were extracted from the PDF (record count at start of PDF: ${recordCount}; extracted application count: ${developmentApplications.length}).`);
        else if (recordCountDiscrepancy == -1)
            console.log(`Warning: 1 extra record was extracted from the PDF (record count at start of PDF: ${recordCount}; extracted application count: ${developmentApplications.length}).`);
        else if (recordCountDiscrepancy == 1)
            console.log(`Warning: 1 record was not extracted from the PDF (record count at start of PDF: ${recordCount}; extracted application count: ${developmentApplications.length}).`);
        else if (recordCountDiscrepancy >= 2)
            console.log(`Warning: ${recordCountDiscrepancy} records were not extracted from the PDF (record count at start of PDF: ${recordCount}; extracted application count: ${developmentApplications.length}).`);
    }

    return developmentApplications;
}

// Gets a random integer in the specified range: [minimum, maximum).

function getRandom(minimum: number, maximum: number) {
    return Math.floor(Math.random() * (Math.floor(maximum) - Math.ceil(minimum))) + Math.ceil(minimum);
}

// Pauses for the specified number of milliseconds.

function sleep(milliseconds: number) {
    return new Promise(resolve => setTimeout(resolve, milliseconds));
}

// Parses the development applications.

async function main() {
    // Ensure that the database exists.

    let database = await initializeDatabase();
    
    // Read all street, street suffix, suburb, state and post code information.

    readAddressInformation();

    // Retrieve the pages that contain the links to the PDFs.

    let pdfUrls: string[] = [];
    for (let index = 1; index <= 10; index++) {  // search up to 10 pages
        let url = DevelopmentApplicationsUrl.replace(/\{0\}/g, index.toString());
        console.log(`Retrieving page: ${url}`);

        let body = await request({ url: url, proxy: process.env.MORPH_PROXY });
        await sleep(2000 + getRandom(0, 5) * 1000);
        let $ = cheerio.load(body);
        
        for (let element of $("h3.generic-list__title a").get()) {
            let pdfUrl = new urlparser.URL(element.attribs.href, DevelopmentApplicationsUrl);
            pdfUrl.protocol = "http";  // force to use HTTP instead of HTTPS
            if (pdfUrl.href.toLowerCase().includes(".pdf"))
                if (!pdfUrls.some(url => url === pdfUrl.href))  // avoid duplicates
                    pdfUrls.push(pdfUrl.href);
        }
    }

    if (pdfUrls.length === 0) {
        console.log("No PDF URLs were found on the page.");
        return;
    }
    console.log(`Found ${pdfUrls.length} PDF URL(s).`);

    // Select the most recent PDF.  And randomly select one other PDF (avoid processing all PDFs
    // at once because this may use too much memory, resulting in morph.io terminating the current
    // process).

    let selectedPdfUrls: string[] = [];
    selectedPdfUrls.push(pdfUrls.shift());
    if (pdfUrls.length > 0)
        selectedPdfUrls.push(pdfUrls[getRandom(0, pdfUrls.length)]);
    if (getRandom(0, 2) === 0)
        selectedPdfUrls.reverse();

    for (let pdfUrl of selectedPdfUrls) {
        console.log(`Parsing document: ${pdfUrl}`);
        let developmentApplications = await parsePdf(pdfUrl);
        console.log(`Parsed ${developmentApplications.length} development application(s) from document: ${pdfUrl}`);

        // Attempt to avoid reaching 512 MB memory usage (this will otherwise result in the
        // current process being terminated by morph.io).

        if (global.gc)
            global.gc();

        console.log(`Inserting development applications into the database.`);
        for (let developmentApplication of developmentApplications)
            await insertRow(database, developmentApplication);
    }
}

main().then(() => console.log("Complete.")).catch(error => console.error(error));
